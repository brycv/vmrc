#!/bin/sh
#
################################################################ LICENSE
#
# Copyright (c) 2012-2016 Michael Dexter <editor@callfortesting.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
############################################################ INFORMATION
# 
# Title: make VM script function library
# Version: v.0.9.3
#
# Functions used by the mkvm.sh Virtual Machine provisioning script
#
################################################################## USAGE

f_timestamp() # A simple timestamp function
{
echo  $( date "+%Y%m%d-%H%M%S" )
}

# md(4) functions from vm and may be useful after mid-provision exits
f_getmdname() # vm_name # Retrieve md(4) IDs associated with $1 ($vm_name)
{
#	   mdconfig -lv | awk -v vm_name="$1" \
#			   '$0 ~ "^[^/]*/" vm_name "\.img$" { print $1 }'
		local local_img_name=$1 # Takes vm_name, lacks `.img' suffix
		mdconfig -lv | awk -v local_vmname="$local_img_name" '
		{
				md=$1
				sub("^[^/]*", "")
				if ($0 ~ "/" local_vmname "\.img$")
						print md
		}'
}
		  
f_mddestroy() # $1 ($vm_name) Destroy multiple md(4) IDs of $vm_name
{
		echo Destroying all memory devices associated with $1
		for dev in $( f_getmdname $1 ); do
				echo Destroying mdconfig device $dev
				mdconfig -du "$dev"
		done
}

f_wipe_dev() ## $1 dev ## - Wipe everything possible from a device
{
# NOTE /dev/label/
# CONSIDER SWAP OFF AND JOURNAL OFF, pool membership?
# PC-BSD
#  for i in `swapctl -l | grep "$DISK | awk '{print $1}'`
#  do
#	swapoff ${i} >/dev/null 2>/dev/null
#  done
#	  gjournal stop -f ${rawjournal} >>${LOGOUT} 2>>${LOGOUT}
#	  gjournal clear ${rawjournal} >>${LOGOUT} 2>>${LOGOUT}

# Destroy pools
# Destroy nop's
# Delete partitions 1 2 3 4... before destroy
# gpart delete -i n $1
#swapoff ${1}p1 # FreeNAS
	geli detach $1
	gpart destroy -F $1
	graid delete $1
	zpool labelclear -f $1
	gpart create -s gpt $1
	gpart destroy -F $1
	dd if=/dev/zero of=$1 bs=1m count=1 # 1048576 bytes
#dd if=/dev/zero of=$1 count=3000 # 1536000 bytes
#dd if=/dev/zero of=/dev/md0 bs=512 count=34 # 17408 bytes
#dd if=/dev/zero of=$f_device bs=512 count=1
	dd if=/dev/zero of=${1} bs=1m oseek=`diskinfo ${1} | awk '{print int($3 / (1024*1024)) - 4;}'`
}

# PARTITIONING

# Optional data partitions would require sizes for all

# Verify if a device has aligned gpart partitions
f_check_gpt_alignment() ## $1 dev ##
{
	exitcode="0" # Mathematical answer that doubles as a return value

for alignment in $( gpart backup $1 | tail -n +2 | cut -d " " -f 3 ); do
        result=$( echo "$alignment % 8" | bc )
        exitcode=$(( $exitcode+$result )) # Add any non-zero results to total
done

return $exitcode
}

# Create a traditional fdisk/MBR layout
f_fdisk_mbr_layout_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
			[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_fdisk_mbr_layout() ## $1 dev ##
{
	fdisk -BI $1
}

f_fdisk_mbr_layout_debug() ## $1 dev ##
{
	echo
	echo Running ls on the $1 asterisk
	ls ${1}*
#	/dev/md0s1
#	test: file diska.img: x86 boot sector; partition 1: ID=0xa5, active, starthead 1, startsector 63, 2088387 sectors, code offset 0x31
#	END RESULT: /dev/md0s1
# 512/4096 is not an issue at this stage!
}

# Create a gpart/MBR layout
f_gpart_mbr_layout_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_layout() ## $1 dev ##
{
	gpart create -s mbr $1
	gpart add -t freebsd $1
	gpart create -s bsd ${1}s1 # DO NOT DELETE AND RECREATE WILL FAIL
}


# Create a gpart/GPT layout

f_gpart_gpt_layout_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_layout() ## $1 dev ##
{
	echo Creating Layout
	gpart create -s gpt $1
}

f_gpart_gpt_layout_debug() ## $1 dev ##
{
	echo
	echo Running ls on $1 asterisk
# file <disk image>
	ls ${1}*
	echo
	echo Running gpart show $1
	gpart show $1
}

# Install boot code to an fdisk/MBR layout
f_fdisk_mbr_ufs_boot_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_fdisk_mbr_ufs_boot() ## $1 dev ##
{
	bsdlabel -wB ${1}s1
# creates /dev/md0s1a surprisingly. why?
}

f_fdisk_mbr_ufs_boot_debug() ## $1 dev ##
{
	echo Running ls $1
	ls $1
# Should this have created /dev/mdNs1a ?
}


# Install the boot0 boot manager to an fdisk/MBR layout
# Will this only give the menu if there are multiple slices/drives?
f_fdisk_mbr_ufs_bootmgr_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_fdisk_mbr_ufs_bootmgr() ## $1 dev ## Same as fdisk -B -b /boot/boot0
{
	bsdlabel -w -B -b /boot/boot0 ${1}s1
# creates /dev/md0s1a surprisingly why?
}

f_fdisk_mbr_ufs_bootmgr_debug() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}


# http://daemon-notes.com/articles/system/install-zfs/gpart
# Install boot code to a gpart/MBR/UFS layout
f_gpart_mbr_ufs_boot_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_ufs_boot() ## $1 dev ## no freebsd-boot!
{
# CHECK THESE

	gpart bootcode -b /boot/mbr $1
	gpart set -a active -i 1 $1
	gpart bootcode -b /boot/boot ${1}s1
}

f_gpart_mbr_ufs_boot_debug() ## $1 dev ##
{
	echo Running ls $1 asterisk
	ls ${1}*
	gpart show $1
}


# Install the boot0 boot manager to a gpart/MBR/UFS layout
f_gpart_mbr_ufs_bootmgr_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_ufs_bootmgr() ## $1 dev ##
{
	gpart bootcode -b /boot/boot0 $1
	gpart set -a active -i 1 $1
	gpart bootcode -b /boot/boot ${1}s1 # mgr HERE TOO? (see w block)
}

f_gpart_mbr_ufs_bootmgr_debug() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}


# Install boot code to a gpart/GPT/UFS layout
# Install the boot0 boot manager to a gpart/MBR/UFS layout
f_gpart_gpt_ufs_boot_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_ufs_boot() ## $1 dev ## active by default? boot0 mgr?
{
# Note alignment. Change?
	gpart add -s 512k -a 4k -t freebsd-boot $1
	gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 $1
}

f_gpart_gpt_ufs_boot_debug() ## $1 dev ##
{
	echo Running gpart show $1
	gpart show $1
}


# Install the boot0 boot manager to a gpart/GPT/UFS layout
f_gpart_gpt_ufs_bootmgr_preflight() ## $1 dev ##
{
	echo Verifying that $1 exists
	[ -e $1 ] || \
	{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_ufs_bootmgr() ## $1 dev ## active by default? boot0 mgr?
{
# Note alignment

# IMPLEMENT
	gpart add -s 512k -a 4k -t freebsd-boot $1
	gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 $1
}

f_gpart_gpt_ufs_bootmgr_debug() ## $1 dev ##
{
	echo Simple debug output
	echo
}


# Install boot code to a gpart/MBR/ZFS layout
f_gpart_mbr_zfs_boot_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_zfs_boot() ## $1 dev ##
{
	echo Adding Boot Code
	gpart bootcode -b /boot/mbr $1
#CHECK THIS ONE:
	gpart set -a active -i 1 $1
	gpart bootcode -b /boot/boot ${1}s1
	dd if=/boot/zfsboot of=${1}s1 count=1

###### !!! ######
# Probably too early! Needed?
#	dd if=/boot/zfsboot of=${1}s1a skip=1 seek=1024
}

f_gpart_mbr_zfs_boot_debug() ## $1 dev ##
{
	echo Running ls and gpart show on $1
#file 2gb.img
	ls ${1}*
	gpart show $1
	gpart show ${1}s1
	gpart show ${1}s1a
}


# Install the boot0 boot manager to a gpart/MBR/ZFS layout
f_gpart_mbr_zfs_bootmgr_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_zfs_bootmgr() ## $1 dev ##
{
	gpart bootcode -b /boot/boot0 $1
#CHECK THIS ONE:
	gpart set -a active -i 1 $1
	gpart bootcode -b /boot/boot ${1}s1
	dd if=/boot/zfsboot of=${1}s1 count=1
	# Probably too early!
	dd if=/boot/zfsboot of=${1}s1a skip=1 seek=1024
}

f_gpart_mbr_zfs_bootmgr_debug() ## $1 dev ##
{
	echo Simple debug output
	echo
}


# Install boot code to a gpart/GPT/ZFS layout - active by default? boot0 mgr?
f_gpart_gpt_zfs_boot_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_zfs_boot() ## $1 dev ##
{
# Note alignment
# CHECK
	gpart add -s 512k -a 4k -t freebsd-boot $1
	gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 $1
}

f_gpart_gpt_zfs_boot_debug() ## $1 dev ##
{
	echo Running ls and gpart show on $1
#file 2gb.img
	ls ${1}*
	gpart show $1
	gpart show ${1}p1
	#gpart show ${1}p2
}


# Install the boot0 boot manager to a gpart/GPT/ZFS layout
f_gpart_gpt_zfs_bootmgr_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_zfs_bootmgr() ## $1 dev ## active by default? boot0 mgr?
{
# Note alignment

# CHECK THIS
	gpart add -s 512k -a 4k -t freebsd-boot $1
	gpart bootcode -b /boot/pmbr -p /boot/gpt_zfsboot -i 1 $1
}

# DO I WANT TO LABEL? UFS by label, ZFS by label...
# NOTE NEWFS -L http://www.wonkity.com/~wblock/docs/html/disksetup.html
# then disktab!!!
# FSCK! This isn't even with datasets in mind!
# md device disk labels? iscsi?
# See boot0 with bhyveload?
# SWAP!!! slice? dataset?

f_gpart_gpt_zfs_bootmgr_debug() ## $1 dev ##
{
	echo Running ls on $1 asterisk
	ls ${1}*
}


# Create a new fdisk/MBR/UFS bootable filesystem (better name)
f_fdisk_mbr_ufs_newfs_bootable_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_fdisk_mbr_ufs_newfs_bootable() ## $1 dev ##
{
	newfs -U ${1}s1a
}

f_fdisk_mbr_ufs_newfs_bootable_debug() ## $1 dev ##
{
	echo Running ls and fdisk on $1
	ls ${1}*
	fdisk $1
}


# Create a new fdisk/MBR/UFS data filesystem (better name)
f_fdisk_mbr_ufs_newfs_data_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_fdisk_mbr_ufs_newfs_data() ## $1 dev ##
{
	newfs -U ${1}s1 # IF A DATA DISK WITH NO BOOT!
}


# Create a new gpart/MBR/UFS partition and filesystem
f_gpart_mbr_ufs_newfs_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_ufs_newfs() ## $1 dev ##
{
# Note alignment
	gpart add -t freebsd-ufs -a 1m ${1}s1
	newfs -U ${1}s1a
# was giving: gpart: autofill: No space left on device
}

f_gpart_mbr_ufs_newfs_debug() ## $1 dev ##
{
	echo Running ls and gpart show on $1
	ls ${1}*
	gpart show $1
}


# Create a new gpart/GPT/UFS partition and filesystem
f_gpart_gpt_ufs_newfs_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_ufs_newfs() ## $1 dev ##
{
# Note alignment
	gpart add -t freebsd-ufs -a 1m $1
	newfs -U ${1}p2
}

f_gpart_gpt_ufs_newfs_debug() ## $1 dev ##
{
	echo Running ls and gpart show on $1
	ls ${1}*
	gpart show $1
}


# Create a new gpart/MBR/ZFS partition
f_gpart_mbr_zfs_part_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_mbr_zfs_part() ## $1 dev ##
{
# Note alignment
	gpart add -t freebsd-zfs -a 1m ${1}s1
}

f_gpart_mbr_zfs_part_debug() ## $1 dev ##
{
	echo Running ls and gpart show on $1
	ls ${1}*
	gpart show $1
}


# Create a new gpart/GPT/ZFS partition
f_gpart_gpt_zfs_part_preflight() ## $1 dev ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
}

f_gpart_gpt_zfs_part() ## $1 dev ##
{
# Note alignment
	gpart add -t freebsd-zfs -a 1m $1
}

f_gpart_gpt_zfs_part_debug() ## $1 dev ##
{
	echo Running ls and gpart show on $1
	ls ${1}*
	gpart show $1
}


# add boot0 manager to zfs?

# Create a new gpart/MBR/zpool ???


# WE REALLY WANT TO MAKE SURE $DEST IS CLEAR OR ZPOOL FAILS

# Create a new gpart/GPT/zpool
f_gpart_mbr_zpool_preflight() ## $1 dev $2 pool name $3 mount point ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
	[ -e $3 ] || \
	{ echo Mount point $3 does not exist. Exiting ; exit 1 ; }
	ls $3
	echo You entered $2 and $3
}

f_gpart_mbr_zpool() ## $1 dev $2 pool name $3 mount point ##
{
#kldload zfs
# Note alignment
	gnop create -S 4096 ${1}s1a
	echo debug: check for nop *s1a.nop ; ls ${1}s1a*
	zpool create $vm_dev_flags -o cachefile=none -R $3 -m / $2 ${1}s1a.nop
# Allan: -R $3 (no mount point, no cache file, see man page)
# -O canmount=off ? -m none -o altroot
	zpool export $2
	gnop destroy -f ${1}s1a.nop
# Note that it is exported and not ready for population!
}

f_gpart_mbr_zpool_debug() ## $1 dev $2 pool name $3 mount point ##
{
		echo Verifying that $1 exists
		[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
	[ -e $3 ] || \
	{ echo Mount point $3 does not exist. Exiting ; exit 1 ; }
	ls $3
	ls ${1}*
	gpart show $1
	zpool import
#	zpool list | grep $2
#	zfs list | grep $2
#	echo debug: zpool list | grep $2 ; zpool list | grep $2
#	echo debug: zfs list | grep $2 ; zfs list | grep $2
# needs to be imported first:
#	echo debug: checking sector size ; zdb -C $pool | grep ashift

}


# Create a new gpart/GPT/zpool
f_gpart_gpt_zpool_preflight() ## $1 dev $2 pool name $3 mount point ##
{
	echo Verifying that $1 exists
			[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
		[ -e $3 ] || \
		{ echo Mount point $3 does not exist. Exiting ; exit 1 ; }
	[ -e $1 ] || echo Mount point $3 does not exist.
	ls $3
	echo You entered $2 and $3
	echo Creating Pool
}

f_gpart_gpt_zpool() ## $1 dev $2 pool name $3 mount point ##
{
#kldload zfs
# Note alignment
	gnop create -S 4096 ${1}p2
	echo inline debug: check for nop *p2.nop ; ls ${1}p2*
	zpool create $vm_dev_flags -o cachefile=none -R $3 -m / $2 ${1}p2.nop
# -O canmount=off ? -m none -o altroot
	zpool export $2
	gnop destroy -f ${1}p2.nop
# Note that it is exported and not ready for population!
}

f_gpart_gpt_zpool_debug() ## $1 dev $2 pool name $3 mount point ##
{
	echo Verifying that $1 exists
			[ -e $1 ] || \
		{ echo Device $1 does not exist. Exiting ; exit 1 ; }
		[ -e $3 ] || \
		{ echo Mount point $3 does not exist. Exiting ; exit 1 ; }
	[ -e $1 ] || echo Mount point $3 does not exist.
	ls $3
	ls ${1}*
	gpart show $1
	zpool import
}


f_installset_preflight() ## $1 set name and $2 destination ##
{
	if [ ! -f $1 ]; then
		echo Distribution set $1 does not exist. Exiting
		exit 1
	fi

	if [ ! -d $2 ]; then
		echo Mount destination directory $2 does not exist. Exiting
		exit 1
	fi

# CHECK IF EMPTY. UFS will show .snap and zfs will show nothing
#	if [ $( ls $2 * ) = "ls: No match." ]; then
#		echo Destination directory is not empty. Exiting.
#		exit
#	fi

}

f_installset() ## $1 set name and $2 destination ##
{
	echo Extracting distribution set $1 to $2
#	cat $1 | tar xpf - -C $2
	tar xpf $1 -C $2
}

f_installset_debug() ## $1 set name and $2 destination ##
{
	if [ "$1" = "kernel.txz" ]; then
		ls ${2}/boot/
	else
		ls $2
	fi
}


# Configure loader.conf, takes in $1 mount point
f_config_loader_conf_preflight() ## $1 mount point ##
{
	echo Backing up loader.conf if it exists
	if [ -f ${1}/boot/loader.conf ]; then
			local timestamp=$( f_timestamp )
			cp ${1}/boot/loader.conf ${1}/boot/loader.conf.$timestamp
	fi
}

f_config_loader_conf() ## $1 mount point ##
{
	cat >> ${1}/boot/loader.conf <<-EOF
autoboot_delay="3"
zfs_load="YES"
# Seems fine without: vfs.root.mountfrom="zfs:$pool/ROOT/default"
EOF
}


# $1 mount point
f_config_loader_conf_debug_preflight() ## $1 mount point ##
{
	echo loader_conf
}

f_config_loader_conf_debug() ## $1 mount point ##
{
	cat $1/boot/loader.conf
}


# Configure a VirtIO MBR fstab, takes in $1 mount point
f_config_mbr_fstab_preflight() ## $1 mount point ##
{
	echo Backing up fstab if it exists
	if [ -f ${1}/etc/fstab ]; then
			local timestamp=$( f_timestamp )
			cp ${1}/etc/fstab ${1}/etc/fstab.$timestamp
	fi
}

f_config_mbr_fstab() ## $1 mount point ##
{
	cat > ${1}/etc/fstab <<-EOF
# Device	Mountpoint	FStype	Options	Dump	Pass#
/dev/ada0s1a	/		ufs	rw	1	1
EOF
}

f_config_mbr_fstab_debug() ## $1 mount point ##
{
	cat $1/etc/fstab
}


# Configure a VirtIO GPT fstab, takes in $1 mount point
f_config_gpt_fstab_preflight() ## $1 mount point ##
{
	echo Backing up fstab if it exists
	if [ -f ${1}/etc/fstab ]; then
			local timestamp=$( f_timestamp )
		cp ${1}/etc/fstab ${1}/etc/fstab.$timestamp
	fi
}

f_config_gpt_fstab() ## $1 mount point ##
{
	cat > ${1}/etc/fstab <<-EOF
# Device	Mountpoint	FStype	Options	Dump	Pass#
/dev/ada0p2	/		ufs	 rw	  1	   1
EOF
}

f_config_gpt_fstab_debug() ## $1 mount point ##
{
	cat $1/etc/fstab
}


f_config_zfs_fstab_preflight() ## $1 mount point ##
{
	echo Backing up fstab if it exists
	if [ -f ${1}/etc/fstab ]; then
			local timestamp=$( f_timestamp )
			cp ${1}/etc/fstab ${1}/etc/fstab.$timestamp
	fi
}
f_config_zfs_fstab() ## $1 mount point ##
{
	cat > ${1}/etc/fstab <<-EOF
# Device				Mountpoint	  FStype  Options		 Dump	Pass#
EOF
}

f_config_zfs_fstab_debug() ## $1 mount point ##
{
	cat $1/etc/fstab
}


# Configure bhyve-friendly /etc/ttys, takes in $1 vm_name (NOT vm_mountpoint)
f_config_ttys_preflight() ## $1 mount point ##
{
	echo
	echo Verifying that VM is mounted on its mount point
		( mount | grep -qw $1/mnt ) || \
		{ echo $1 is not mounted. Exiting ; exit 1 ; }

	echo
	echo Verifying that $1/etc/ttys exists
	[ -f $1/etc/ttys ] && \
	{ echo $1/etc/ttys does not exist. Exiting ; exit 1 ; }
}

f_config_ttys() ## $1 mount point ##
{
echo
echo Determining if a NanoBSD or generic layout
if [ -f $1/etc/diskless ]; then
	echo
	echo Assuming a NanoBSD layout
	echo
	echo Backing up $1/conf/base/etc/ttys
	local timestamp=$( f_timestamp )
	cp $1/conf/base/etc/ttys $1/conf/base/etc/ttys.orig.$timestamp

	echo
	echo Verifying if FreeNAS or generic NanoBSD
		if [ ! $( grep -qw freenas $1/conf/base/etc/ttys ) ]; then
			echo
			echo setting ttyu0 to vt100 for FreeNAS
cat >> $1/conf/base/etc/ttys <<-EOF
ttyu0 "/usr/libexec/getty freenas" vt100 on secure
EOF
		else
			echo Exiting! No sure why it chokes on the cat
			exit 1
# BUG: With the cat, it reports "expecting fi" at the end of the function
			echo
			echo Appending the bhyve tty
#cat >> $1/conf/base/etc/ttys <<-EOF
#ttyu0 "/usr/libexec/getty 3wire.9600" vt100 on secure
#EOF	
		fi # Done with NanoBSD

else # Not NanoBSD
	echo
	echo Backing up $1/etc/ttys
# it passes if the nested if is removed
	local timestamp=$( f_timestamp )
	cp $1/etc/ttys $1/etc/ttys.orig.$timestamp

	echo
	echo Appending the bhyve tty
		cat >> $1/etc/ttys <<-EOF
#console "/usr/libexec/getty std.9600" vt100 on secure
ttyu0 "/usr/libexec/getty 3wire.9600" vt100 on secure
EOF
fi
}

# tty Notes:
# We assume a serial-ready pfSense download!
# Tried for FreeNAS: sed -i '' -e "s/cons25/vt100/" $1/etc/ttys
# ttyv0   "/usr/libexec/getty freenas"	cons25  on  secure
# console "/usr/libexec/getty freenas"   vt100   on   secure
# ttyu0 "/usr/libexec/getty freenas" vt100 on secure


f_config_ttys_debug() ## $1 mount point ##
{
	if [ -f $1/conf/base/etc/ttys ]; then
		echo
		echo tailing $1/conf/base/etc/ttys
		tail $1/conf/base/etc/ttys
	else
		echo
		echo $1/etc/ttys
		tail $1/etc/ttys
	fi
}


# Configure timezone
f_config_tz_preflight() ## $1 mount point, $2 time zone ##
{
	echo Creating /var/db/zoneinfo and running tzsetup
}

f_config_tz() ## $1 mount point, $2 time zone ##
{
	echo $2 >> $1/var/db/zoneinfo
	tzsetup -r -C ${1}/
}

f_config_tz_debug() ## $1 mount point, $2 time zone ##
{
	echo cat $1/var/db/timezone
}


# Configure a bhyve-friendly rc.conf
f_config_rc_conf_preflight() ## $1 mount point ##
{
echo Backing up rc.conf if it exists
if [ -f ${1}/etc/rc.conf ]; then
	local timestamp=$( f_timestamp )
	cp ${1}/etc/rc.conf ${1}/etc/rc.conf.$timestamp
fi
}

f_config_rc_conf() ## $1 mount point $2 hostname $3 IP $4 GW ##
{
if [ ! "$3" = "" ]; then # if an IP is set
	cat > ${1}/etc/rc.conf <<-EOF
hostname="$2"

ifconfig_vtnet0="$3 netmask 255.255.255.0"
defaultrouter="$4"
sshd_enable="YES"

sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
EOF

else
	cat > ${1}/etc/rc.conf <<-EOF
hostname="$2"

ifconfig_vtnet0="DHCP"
sshd_enable="YES"

sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"
EOF
fi
}

f_config_rc_conf_debug() ## $1 mount point ##
{
	cat ${1}/etc/rc.conf
}


# Configure resolv.conf
f_config_resolv_conf_preflight() ## $1 mount point ##
{
	echo Backing up rc.conf if it exists
	if [ -f ${1}/etc/resolv.conf ]; then
			local timestamp=$( f_timestamp )
			cp ${1}/etc/resolv.conf ${1}/etc/resolv.conf.$timestamp
	fi
}

f_config_resolv_conf() ## $1 mount point $2 searchdomain $3 nameserver ##
{
cat > ${1}/etc/resolv.conf <<-EOF
search $2
nameserver $3
EOF
}

f_config_resolv_conf_debug() ## $1 mount point ##
{
	cat ${1}/etc/resolv.conf
}


# Configure sshd root login
f_config_sshd_root_preflight() ## $1 mount point ##
{
	echo sshd_root_enable
}

f_config_sshd_root() ## $1 mount point ##
{
	echo PermitRootLogin yes >> ${1}/etc/ssh/sshd_config
}

f_config_sshd_root_debug() ## $1 mount point ##
{
	grep Root $1/etc/ssh/sshd_config
}


f_set_password_preflight() ##  ##
{
	echo set_password_pre
}

f_set_password() ## $1 password $2 mount point ##
{
	echo "$1" | pw -V ${2}/etc/ usermod root -h 0
}

f_set_password_debug() ## $1 mount point ##
{
	echo set_password_post
}

# f_checkconflicts
#
# Check for conflicting VM IDs
#
f_checkconflicts() ## $1 host_vmdir from /usr/local/etc/vm.conf
{
	if [ $( ls $1 | wc -l ) = 0 ]; then # None exist. A better test?
		echo No VMs in ${1}. Exiting
		exit 0
	fi

local conflict=""

# Loop through and check all VMs for each VM found
	for vm_found in ${1}/* ; do # Full path name
		vm_foundname="${vm_found##*/}" # Strip path
		vm_foundid="${vm_foundname##*[!0-9]}"
		for vm_check in ${1}/* ; do # Full path name
			vm_checkname="${vm_check##*/}" # Strip path
			vm_checkid="${vm_checkname##*[!0-9]}"
			if [ "$vm_foundname" = "$vm_checkname" ]; then
				continue # Ignore self
			elif [ "$vm_foundid" = "$vm_checkid" ]; then
			echo VMs $vm_foundname and $vm_checkname conflict!
			fi
		done
	done
}
